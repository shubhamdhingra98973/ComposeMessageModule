//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `Ubuntu-Bold.ttf`.
    static let ubuntuBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Ubuntu-Bold", pathExtension: "ttf")
    /// Resource file `Ubuntu-BoldItalic.ttf`.
    static let ubuntuBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Ubuntu-BoldItalic", pathExtension: "ttf")
    /// Resource file `Ubuntu-Italic.ttf`.
    static let ubuntuItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Ubuntu-Italic", pathExtension: "ttf")
    /// Resource file `Ubuntu-Light.ttf`.
    static let ubuntuLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Ubuntu-Light", pathExtension: "ttf")
    /// Resource file `Ubuntu-LightItalic.ttf`.
    static let ubuntuLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Ubuntu-LightItalic", pathExtension: "ttf")
    /// Resource file `Ubuntu-Medium.ttf`.
    static let ubuntuMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Ubuntu-Medium", pathExtension: "ttf")
    /// Resource file `Ubuntu-MediumItalic.ttf`.
    static let ubuntuMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Ubuntu-MediumItalic", pathExtension: "ttf")
    /// Resource file `Ubuntu-Regular.ttf`.
    static let ubuntuRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Ubuntu-Regular", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "Ubuntu-Bold", withExtension: "ttf")`
    static func ubuntuBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ubuntuBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Ubuntu-BoldItalic", withExtension: "ttf")`
    static func ubuntuBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ubuntuBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Ubuntu-Italic", withExtension: "ttf")`
    static func ubuntuItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ubuntuItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Ubuntu-Light", withExtension: "ttf")`
    static func ubuntuLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ubuntuLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Ubuntu-LightItalic", withExtension: "ttf")`
    static func ubuntuLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ubuntuLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Ubuntu-Medium", withExtension: "ttf")`
    static func ubuntuMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ubuntuMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Ubuntu-MediumItalic", withExtension: "ttf")`
    static func ubuntuMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ubuntuMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Ubuntu-Regular", withExtension: "ttf")`
    static func ubuntuRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ubuntuRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `Ubuntu-BoldItalic`.
    static let ubuntuBoldItalic = Rswift.FontResource(fontName: "Ubuntu-BoldItalic")
    /// Font `Ubuntu-Bold`.
    static let ubuntuBold = Rswift.FontResource(fontName: "Ubuntu-Bold")
    /// Font `Ubuntu-Italic`.
    static let ubuntuItalic = Rswift.FontResource(fontName: "Ubuntu-Italic")
    /// Font `Ubuntu-LightItalic`.
    static let ubuntuLightItalic = Rswift.FontResource(fontName: "Ubuntu-LightItalic")
    /// Font `Ubuntu-Light`.
    static let ubuntuLight = Rswift.FontResource(fontName: "Ubuntu-Light")
    /// Font `Ubuntu-MediumItalic`.
    static let ubuntuMediumItalic = Rswift.FontResource(fontName: "Ubuntu-MediumItalic")
    /// Font `Ubuntu-Medium`.
    static let ubuntuMedium = Rswift.FontResource(fontName: "Ubuntu-Medium")
    /// Font `Ubuntu-Regular`.
    static let ubuntuRegular = Rswift.FontResource(fontName: "Ubuntu-Regular")
    
    /// `UIFont(name: "Ubuntu-Bold", size: ...)`
    static func ubuntuBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ubuntuBold, size: size)
    }
    
    /// `UIFont(name: "Ubuntu-BoldItalic", size: ...)`
    static func ubuntuBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ubuntuBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Ubuntu-Italic", size: ...)`
    static func ubuntuItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ubuntuItalic, size: size)
    }
    
    /// `UIFont(name: "Ubuntu-Light", size: ...)`
    static func ubuntuLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ubuntuLight, size: size)
    }
    
    /// `UIFont(name: "Ubuntu-LightItalic", size: ...)`
    static func ubuntuLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ubuntuLightItalic, size: size)
    }
    
    /// `UIFont(name: "Ubuntu-Medium", size: ...)`
    static func ubuntuMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ubuntuMedium, size: size)
    }
    
    /// `UIFont(name: "Ubuntu-MediumItalic", size: ...)`
    static func ubuntuMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ubuntuMediumItalic, size: size)
    }
    
    /// `UIFont(name: "Ubuntu-Regular", size: ...)`
    static func ubuntuRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: ubuntuRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.ubuntuRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Ubuntu-Regular' could not be loaded, is 'Ubuntu-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ubuntuMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Ubuntu-MediumItalic' could not be loaded, is 'Ubuntu-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ubuntuMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Ubuntu-Medium' could not be loaded, is 'Ubuntu-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ubuntuBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Ubuntu-BoldItalic' could not be loaded, is 'Ubuntu-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ubuntuLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Ubuntu-Light' could not be loaded, is 'Ubuntu-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ubuntuItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Ubuntu-Italic' could not be loaded, is 'Ubuntu-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ubuntuLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Ubuntu-LightItalic' could not be loaded, is 'Ubuntu-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.ubuntuBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Ubuntu-Bold' could not be loaded, is 'Ubuntu-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 191 images.
  struct image {
    /// Image `Achievemets1`.
    static let achievemets1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Achievemets1")
    /// Image `Add acount`.
    static let addAcount = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add acount")
    /// Image `Add image`.
    static let addImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add image")
    /// Image `Add previous school`.
    static let addPreviousSchool = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add previous school")
    /// Image `Admission No.`.
    static let admissionNo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Admission No.")
    /// Image `Adress`.
    static let adress = Rswift.ImageResource(bundle: R.hostingBundle, name: "Adress")
    /// Image `Anniversary`.
    static let anniversary = Rswift.ImageResource(bundle: R.hostingBundle, name: "Anniversary")
    /// Image `Answered`.
    static let answered = Rswift.ImageResource(bundle: R.hostingBundle, name: "Answered")
    /// Image `App-user_report`.
    static let appUser_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "App-user_report")
    /// Image `Appuser_Android`.
    static let appuser_Android = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appuser_Android")
    /// Image `Appuser_iOS`.
    static let appuser_iOS = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appuser_iOS")
    /// Image `Appuser_windows`.
    static let appuser_windows = Rswift.ImageResource(bundle: R.hostingBundle, name: "Appuser_windows")
    /// Image `Assignments1`.
    static let assignments1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Assignments1")
    /// Image `Assignments_new`.
    static let assignments_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Assignments_new")
    /// Image `Attendance1`.
    static let attendance1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Attendance1")
    /// Image `Attendance_new`.
    static let attendance_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Attendance_new")
    /// Image `Attendance_report`.
    static let attendance_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "Attendance_report")
    /// Image `Back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back")
    /// Image `Birthday1`.
    static let birthday1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Birthday1")
    /// Image `Birthday_new`.
    static let birthday_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Birthday_new")
    /// Image `Boys_Stastistica report`.
    static let boys_StastisticaReport = Rswift.ImageResource(bundle: R.hostingBundle, name: "Boys_Stastistica report")
    /// Image `Calss mate1`.
    static let calssMate1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Calss mate1")
    /// Image `Calss mate_new`.
    static let calssMate_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Calss mate_new")
    /// Image `Calsslist_report`.
    static let calsslist_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "Calsslist_report")
    /// Image `Camera big`.
    static let cameraBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "Camera big")
    /// Image `Camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "Camera")
    /// Image `Cancel edited username _ St No.`.
    static let cancelEditedUsername_StNo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cancel edited username _ St No.")
    /// Image `Cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cancel")
    /// Image `Checkbox-fill`.
    static let checkboxFill = Rswift.ImageResource(bundle: R.hostingBundle, name: "Checkbox-fill")
    /// Image `Circulars1`.
    static let circulars1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Circulars1")
    /// Image `Circulars_new`.
    static let circulars_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Circulars_new")
    /// Image `Clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "Clock")
    /// Image `Close Activity`.
    static let closeActivity = Rswift.ImageResource(bundle: R.hostingBundle, name: "Close Activity")
    /// Image `Contact No.`.
    static let contactNo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Contact No.")
    /// Image `Contact person`.
    static let contactPerson = Rswift.ImageResource(bundle: R.hostingBundle, name: "Contact person")
    /// Image `Correct Username _ St. No.`.
    static let correctUsername_StNo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Correct Username _ St. No.")
    /// Image `Correct white`.
    static let correctWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "Correct white")
    /// Image `Cross`.
    static let cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cross")
    /// Image `DOB`.
    static let doB = Rswift.ImageResource(bundle: R.hostingBundle, name: "DOB")
    /// Image `Delete leave`.
    static let deleteLeave = Rswift.ImageResource(bundle: R.hostingBundle, name: "Delete leave")
    /// Image `Designation`.
    static let designation = Rswift.ImageResource(bundle: R.hostingBundle, name: "Designation")
    /// Image `Discard`.
    static let discard = Rswift.ImageResource(bundle: R.hostingBundle, name: "Discard")
    /// Image `Discuss fill`.
    static let discussFill = Rswift.ImageResource(bundle: R.hostingBundle, name: "Discuss fill")
    /// Image `Discuss unfill`.
    static let discussUnfill = Rswift.ImageResource(bundle: R.hostingBundle, name: "Discuss unfill")
    /// Image `Discuss`.
    static let discuss = Rswift.ImageResource(bundle: R.hostingBundle, name: "Discuss")
    /// Image `Ecare logo`.
    static let ecareLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ecare logo")
    /// Image `Edit Icon White`.
    static let editIconWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "Edit Icon White")
    /// Image `Edit icon Green`.
    static let editIconGreen = Rswift.ImageResource(bundle: R.hostingBundle, name: "Edit icon Green")
    /// Image `Edit user name _ St No.`.
    static let editUserName_StNo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Edit user name _ St No.")
    /// Image `Eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "Eye")
    /// Image `Father_s name`.
    static let father_sName = Rswift.ImageResource(bundle: R.hostingBundle, name: "Father_s name")
    /// Image `Favorite`.
    static let favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favorite")
    /// Image `Fee`.
    static let fee = Rswift.ImageResource(bundle: R.hostingBundle, name: "Fee")
    /// Image `Fees_menu`.
    static let fees_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Fees_menu")
    /// Image `Female_Stastistica report`.
    static let female_StastisticaReport = Rswift.ImageResource(bundle: R.hostingBundle, name: "Female_Stastistica report")
    /// Image `Fill radio`.
    static let fillRadio = Rswift.ImageResource(bundle: R.hostingBundle, name: "Fill radio")
    /// Image `Girls_Stastistica report`.
    static let girls_StastisticaReport = Rswift.ImageResource(bundle: R.hostingBundle, name: "Girls_Stastistica report")
    /// Image `Leave Application`.
    static let leaveApplication = Rswift.ImageResource(bundle: R.hostingBundle, name: "Leave Application")
    /// Image `Leave_menu`.
    static let leave_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Leave_menu")
    /// Image `Leave_report`.
    static let leave_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "Leave_report")
    /// Image `Liked`.
    static let liked = Rswift.ImageResource(bundle: R.hostingBundle, name: "Liked")
    /// Image `Logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logout")
    /// Image `Male_Stastistica report`.
    static let male_StastisticaReport = Rswift.ImageResource(bundle: R.hostingBundle, name: "Male_Stastistica report")
    /// Image `Menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu")
    /// Image `Merital staus`.
    static let meritalStaus = Rswift.ImageResource(bundle: R.hostingBundle, name: "Merital staus")
    /// Image `Micro phone`.
    static let microPhone = Rswift.ImageResource(bundle: R.hostingBundle, name: "Micro phone")
    /// Image `Mother_s name`.
    static let mother_sName = Rswift.ImageResource(bundle: R.hostingBundle, name: "Mother_s name")
    /// Image `My Fav`.
    static let myFav = Rswift.ImageResource(bundle: R.hostingBundle, name: "My Fav")
    /// Image `No Activity(1)`.
    static let noActivity1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Activity(1)")
    /// Image `No Assignments`.
    static let noAssignments = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Assignments")
    /// Image `No Birthday`.
    static let noBirthday = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Birthday")
    /// Image `No Circular`.
    static let noCircular = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Circular")
    /// Image `No Classmate`.
    static let noClassmate = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Classmate")
    /// Image `No Discuss`.
    static let noDiscuss = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Discuss")
    /// Image `No Leave`.
    static let noLeave = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Leave")
    /// Image `No Notice`.
    static let noNotice = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Notice")
    /// Image `No Report Card`.
    static let noReportCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Report Card")
    /// Image `No Syllabus`.
    static let noSyllabus = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Syllabus")
    /// Image `No Teachers`.
    static let noTeachers = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Teachers")
    /// Image `No Time table`.
    static let noTimeTable = Rswift.ImageResource(bundle: R.hostingBundle, name: "No Time table")
    /// Image `No activity`.
    static let noActivity = Rswift.ImageResource(bundle: R.hostingBundle, name: "No activity")
    /// Image `No attendance`.
    static let noAttendance = Rswift.ImageResource(bundle: R.hostingBundle, name: "No attendance")
    /// Image `No photos`.
    static let noPhotos = Rswift.ImageResource(bundle: R.hostingBundle, name: "No photos")
    /// Image `No thoughts`.
    static let noThoughts = Rswift.ImageResource(bundle: R.hostingBundle, name: "No thoughts")
    /// Image `Notice1`.
    static let notice1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notice1")
    /// Image `Notice_new`.
    static let notice_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Notice_new")
    /// Image `Open Activity`.
    static let openActivity = Rswift.ImageResource(bundle: R.hostingBundle, name: "Open Activity")
    /// Image `PDF`.
    static let pdF = Rswift.ImageResource(bundle: R.hostingBundle, name: "PDF")
    /// Image `Path 2644`.
    static let path2644 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Path 2644")
    /// Image `Photogallery Thumb`.
    static let photogalleryThumb = Rswift.ImageResource(bundle: R.hostingBundle, name: "Photogallery Thumb")
    /// Image `Photos1`.
    static let photos1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Photos1")
    /// Image `Photos_new`.
    static let photos_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Photos_new")
    /// Image `Plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "Plus")
    /// Image `Post Answers`.
    static let postAnswers = Rswift.ImageResource(bundle: R.hostingBundle, name: "Post Answers")
    /// Image `Profession`.
    static let profession = Rswift.ImageResource(bundle: R.hostingBundle, name: "Profession")
    /// Image `Re edit username _ St. No.`.
    static let reEditUsername_StNo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Re edit username _ St. No.")
    /// Image `Re edit`.
    static let reEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "Re edit")
    /// Image `Report Card Menu`.
    static let reportCardMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Report Card Menu")
    /// Image `Report Card_new`.
    static let reportCard_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Report Card_new")
    /// Image `Report card1`.
    static let reportCard1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Report card1")
    /// Image `Reportcard_report`.
    static let reportcard_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "Reportcard_report")
    /// Image `Reports`.
    static let reports = Rswift.ImageResource(bundle: R.hostingBundle, name: "Reports")
    /// Image `Residential adress`.
    static let residentialAdress = Rswift.ImageResource(bundle: R.hostingBundle, name: "Residential adress")
    /// Image `SMS Smalll Black`.
    static let smsSmalllBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "SMS Smalll Black")
    /// Image `SMS1`.
    static let sms1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "SMS1")
    /// Image `SMS_report`.
    static let sms_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "SMS_report")
    /// Image `SMS`.
    static let smS = Rswift.ImageResource(bundle: R.hostingBundle, name: "SMS")
    /// Image `School bus _ Stastistica report`.
    static let schoolBus_StastisticaReport = Rswift.ImageResource(bundle: R.hostingBundle, name: "School bus _ Stastistica report")
    /// Image `Screen Shot 2018-05-17 at 12.12.47 PM`.
    static let screenShot20180517At121247PM = Rswift.ImageResource(bundle: R.hostingBundle, name: "Screen Shot 2018-05-17 at 12.12.47 PM")
    /// Image `Self_Stastistica report`.
    static let self_StastisticaReport = Rswift.ImageResource(bundle: R.hostingBundle, name: "Self_Stastistica report")
    /// Image `Send Dark`.
    static let sendDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Send Dark")
    /// Image `Send Light`.
    static let sendLight = Rswift.ImageResource(bundle: R.hostingBundle, name: "Send Light")
    /// Image `Statistical reports`.
    static let statisticalReports = Rswift.ImageResource(bundle: R.hostingBundle, name: "Statistical reports")
    /// Image `Statistical_report`.
    static let statistical_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "Statistical_report")
    /// Image `Students_reports`.
    static let students_reports = Rswift.ImageResource(bundle: R.hostingBundle, name: "Students_reports")
    /// Image `Syllabus1`.
    static let syllabus1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Syllabus1")
    /// Image `Syllabus_new`.
    static let syllabus_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Syllabus_new")
    /// Image `TXT`.
    static let txT = Rswift.ImageResource(bundle: R.hostingBundle, name: "TXT")
    /// Image `Teacherlist_report`.
    static let teacherlist_report = Rswift.ImageResource(bundle: R.hostingBundle, name: "Teacherlist_report")
    /// Image `Teachers1`.
    static let teachers1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Teachers1")
    /// Image `Teachers_new`.
    static let teachers_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Teachers_new")
    /// Image `Time table1`.
    static let timeTable1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Time table1")
    /// Image `Time table_new`.
    static let timeTable_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "Time table_new")
    /// Image `Today_s Birthday`.
    static let today_sBirthday = Rswift.ImageResource(bundle: R.hostingBundle, name: "Today_s Birthday")
    /// Image `Toppers1`.
    static let toppers1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Toppers1")
    /// Image `Transport`.
    static let transport = Rswift.ImageResource(bundle: R.hostingBundle, name: "Transport")
    /// Image `Unfilled radio`.
    static let unfilledRadio = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unfilled radio")
    /// Image `Upload`.
    static let upload = Rswift.ImageResource(bundle: R.hostingBundle, name: "Upload")
    /// Image `Video Play`.
    static let videoPlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "Video Play")
    /// Image `What_s new fill`.
    static let what_sNewFill = Rswift.ImageResource(bundle: R.hostingBundle, name: "What_s new fill")
    /// Image `activity calendar_new`.
    static let activityCalendar_new = Rswift.ImageResource(bundle: R.hostingBundle, name: "activity calendar_new")
    /// Image `activity calendar`.
    static let activityCalendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "activity calendar")
    /// Image `add image(1)`.
    static let addImage1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "add image(1)")
    /// Image `add to favorite`.
    static let addToFavorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "add to favorite")
    /// Image `attachment`.
    static let attachment = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachment")
    /// Image `calss and section`.
    static let calssAndSection = Rswift.ImageResource(bundle: R.hostingBundle, name: "calss and section")
    /// Image `checkbox-unfill`.
    static let checkboxUnfill = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox-unfill")
    /// Image `classmates_discuss`.
    static let classmates_discuss = Rswift.ImageResource(bundle: R.hostingBundle, name: "classmates_discuss")
    /// Image `cross of upload image`.
    static let crossOfUploadImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "cross of upload image")
    /// Image `cross(1)`.
    static let cross1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cross(1)")
    /// Image `date of annivesery`.
    static let dateOfAnnivesery = Rswift.ImageResource(bundle: R.hostingBundle, name: "date of annivesery")
    /// Image `e-mega library1`.
    static let eMegaLibrary1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "e-mega library1")
    /// Image `edit cover`.
    static let editCover = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit cover")
    /// Image `emagazine 1`.
    static let emagazine1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "emagazine 1")
    /// Image `email id`.
    static let emailId = Rswift.ImageResource(bundle: R.hostingBundle, name: "email id")
    /// Image `gender`.
    static let gender = Rswift.ImageResource(bundle: R.hostingBundle, name: "gender")
    /// Image `green triangle`.
    static let greenTriangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "green triangle")
    /// Image `ic_answered`.
    static let ic_answered = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_answered")
    /// Image `ic_assignments`.
    static let ic_assignments = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_assignments")
    /// Image `ic_audio`.
    static let ic_audio = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_audio")
    /// Image `ic_brain`.
    static let ic_brain = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_brain")
    /// Image `ic_circular`.
    static let ic_circular = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_circular")
    /// Image `ic_clock`.
    static let ic_clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_clock")
    /// Image `ic_contact`.
    static let ic_contact = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_contact")
    /// Image `ic_download`.
    static let ic_download = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_download")
    /// Image `ic_email_unfill`.
    static let ic_email_unfill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email_unfill")
    /// Image `ic_email`.
    static let ic_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email")
    /// Image `ic_eyeshow`.
    static let ic_eyeshow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_eyeshow")
    /// Image `ic_fee`.
    static let ic_fee = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fee")
    /// Image `ic_like_filled`.
    static let ic_like_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_like_filled")
    /// Image `ic_mail_fill`.
    static let ic_mail_fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mail_fill")
    /// Image `ic_message`.
    static let ic_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_message")
    /// Image `ic_mobile_fill`.
    static let ic_mobile_fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mobile_fill")
    /// Image `ic_mobile_unfill`.
    static let ic_mobile_unfill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mobile_unfill")
    /// Image `ic_notice`.
    static let ic_notice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notice")
    /// Image `ic_parentlogin_fill`.
    static let ic_parentlogin_fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_parentlogin_fill")
    /// Image `ic_parentlogin_unfill`.
    static let ic_parentlogin_unfill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_parentlogin_unfill")
    /// Image `ic_pdf`.
    static let ic_pdf = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pdf")
    /// Image `ic_photo`.
    static let ic_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_photo")
    /// Image `ic_reports`.
    static let ic_reports = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_reports")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `ic_send`.
    static let ic_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_send")
    /// Image `ic_sms`.
    static let ic_sms = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sms")
    /// Image `ic_stafflogin_unfill`.
    static let ic_stafflogin_unfill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_stafflogin_unfill")
    /// Image `ic_studentlogin_fill`.
    static let ic_studentlogin_fill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_studentlogin_fill")
    /// Image `ic_studentlogin_unfill`.
    static let ic_studentlogin_unfill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_studentlogin_unfill")
    /// Image `ic_text`.
    static let ic_text = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_text")
    /// Image `ic_thought`.
    static let ic_thought = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_thought")
    /// Image `ic_unlike`.
    static let ic_unlike = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unlike")
    /// Image `ic_view`.
    static let ic_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_view")
    /// Image `nationality`.
    static let nationality = Rswift.ImageResource(bundle: R.hostingBundle, name: "nationality")
    /// Image `office bearers1`.
    static let officeBearers1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office bearers1")
    /// Image `pauseBtn`.
    static let pauseBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "pauseBtn")
    /// Image `photo album thumb`.
    static let photoAlbumThumb = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo album thumb")
    /// Image `playBtn`.
    static let playBtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "playBtn")
    /// Image `red triangle`.
    static let redTriangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "red triangle")
    /// Image `religion`.
    static let religion = Rswift.ImageResource(bundle: R.hostingBundle, name: "religion")
    /// Image `report card`.
    static let reportCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "report card")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `what_s new unfill`.
    static let what_sNewUnfill = Rswift.ImageResource(bundle: R.hostingBundle, name: "what_s new unfill")
    
    /// `UIImage(named: "Achievemets1", bundle: ..., traitCollection: ...)`
    static func achievemets1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.achievemets1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Add acount", bundle: ..., traitCollection: ...)`
    static func addAcount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addAcount, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Add image", bundle: ..., traitCollection: ...)`
    static func addImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Add previous school", bundle: ..., traitCollection: ...)`
    static func addPreviousSchool(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addPreviousSchool, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Admission No.", bundle: ..., traitCollection: ...)`
    static func admissionNo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.admissionNo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Adress", bundle: ..., traitCollection: ...)`
    static func adress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.adress, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Anniversary", bundle: ..., traitCollection: ...)`
    static func anniversary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.anniversary, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Answered", bundle: ..., traitCollection: ...)`
    static func answered(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.answered, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "App-user_report", bundle: ..., traitCollection: ...)`
    static func appUser_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appUser_report, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Appuser_Android", bundle: ..., traitCollection: ...)`
    static func appuser_Android(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appuser_Android, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Appuser_iOS", bundle: ..., traitCollection: ...)`
    static func appuser_iOS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appuser_iOS, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Appuser_windows", bundle: ..., traitCollection: ...)`
    static func appuser_windows(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appuser_windows, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Assignments1", bundle: ..., traitCollection: ...)`
    static func assignments1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.assignments1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Assignments_new", bundle: ..., traitCollection: ...)`
    static func assignments_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.assignments_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Attendance1", bundle: ..., traitCollection: ...)`
    static func attendance1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attendance1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Attendance_new", bundle: ..., traitCollection: ...)`
    static func attendance_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attendance_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Attendance_report", bundle: ..., traitCollection: ...)`
    static func attendance_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attendance_report, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Birthday1", bundle: ..., traitCollection: ...)`
    static func birthday1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.birthday1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Birthday_new", bundle: ..., traitCollection: ...)`
    static func birthday_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.birthday_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Boys_Stastistica report", bundle: ..., traitCollection: ...)`
    static func boys_StastisticaReport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boys_StastisticaReport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Calss mate1", bundle: ..., traitCollection: ...)`
    static func calssMate1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calssMate1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Calss mate_new", bundle: ..., traitCollection: ...)`
    static func calssMate_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calssMate_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Calsslist_report", bundle: ..., traitCollection: ...)`
    static func calsslist_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calsslist_report, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Camera big", bundle: ..., traitCollection: ...)`
    static func cameraBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cameraBig, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cancel edited username _ St No.", bundle: ..., traitCollection: ...)`
    static func cancelEditedUsername_StNo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelEditedUsername_StNo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Checkbox-fill", bundle: ..., traitCollection: ...)`
    static func checkboxFill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkboxFill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Circulars1", bundle: ..., traitCollection: ...)`
    static func circulars1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circulars1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Circulars_new", bundle: ..., traitCollection: ...)`
    static func circulars_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circulars_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Close Activity", bundle: ..., traitCollection: ...)`
    static func closeActivity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeActivity, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Contact No.", bundle: ..., traitCollection: ...)`
    static func contactNo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactNo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Contact person", bundle: ..., traitCollection: ...)`
    static func contactPerson(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactPerson, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Correct Username _ St. No.", bundle: ..., traitCollection: ...)`
    static func correctUsername_StNo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.correctUsername_StNo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Correct white", bundle: ..., traitCollection: ...)`
    static func correctWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.correctWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Cross", bundle: ..., traitCollection: ...)`
    static func cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cross, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DOB", bundle: ..., traitCollection: ...)`
    static func doB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.doB, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Delete leave", bundle: ..., traitCollection: ...)`
    static func deleteLeave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteLeave, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Designation", bundle: ..., traitCollection: ...)`
    static func designation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.designation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Discard", bundle: ..., traitCollection: ...)`
    static func discard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Discuss fill", bundle: ..., traitCollection: ...)`
    static func discussFill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discussFill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Discuss unfill", bundle: ..., traitCollection: ...)`
    static func discussUnfill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discussUnfill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Discuss", bundle: ..., traitCollection: ...)`
    static func discuss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.discuss, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Ecare logo", bundle: ..., traitCollection: ...)`
    static func ecareLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ecareLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Edit Icon White", bundle: ..., traitCollection: ...)`
    static func editIconWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editIconWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Edit icon Green", bundle: ..., traitCollection: ...)`
    static func editIconGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editIconGreen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Edit user name _ St No.", bundle: ..., traitCollection: ...)`
    static func editUserName_StNo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editUserName_StNo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Father_s name", bundle: ..., traitCollection: ...)`
    static func father_sName(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.father_sName, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Favorite", bundle: ..., traitCollection: ...)`
    static func favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Fee", bundle: ..., traitCollection: ...)`
    static func fee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fee, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Fees_menu", bundle: ..., traitCollection: ...)`
    static func fees_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fees_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Female_Stastistica report", bundle: ..., traitCollection: ...)`
    static func female_StastisticaReport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.female_StastisticaReport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Fill radio", bundle: ..., traitCollection: ...)`
    static func fillRadio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fillRadio, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Girls_Stastistica report", bundle: ..., traitCollection: ...)`
    static func girls_StastisticaReport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.girls_StastisticaReport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Leave Application", bundle: ..., traitCollection: ...)`
    static func leaveApplication(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leaveApplication, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Leave_menu", bundle: ..., traitCollection: ...)`
    static func leave_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leave_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Leave_report", bundle: ..., traitCollection: ...)`
    static func leave_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leave_report, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Liked", bundle: ..., traitCollection: ...)`
    static func liked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.liked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Male_Stastistica report", bundle: ..., traitCollection: ...)`
    static func male_StastisticaReport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.male_StastisticaReport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Merital staus", bundle: ..., traitCollection: ...)`
    static func meritalStaus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meritalStaus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Micro phone", bundle: ..., traitCollection: ...)`
    static func microPhone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.microPhone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Mother_s name", bundle: ..., traitCollection: ...)`
    static func mother_sName(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mother_sName, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "My Fav", bundle: ..., traitCollection: ...)`
    static func myFav(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myFav, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No Activity(1)", bundle: ..., traitCollection: ...)`
    static func noActivity1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noActivity1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No Assignments", bundle: ..., traitCollection: ...)`
    static func noAssignments(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noAssignments, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No Birthday", bundle: ..., traitCollection: ...)`
    static func noBirthday(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noBirthday, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No Circular", bundle: ..., traitCollection: ...)`
    static func noCircular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noCircular, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No Classmate", bundle: ..., traitCollection: ...)`
    static func noClassmate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noClassmate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No Discuss", bundle: ..., traitCollection: ...)`
    static func noDiscuss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noDiscuss, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No Leave", bundle: ..., traitCollection: ...)`
    static func noLeave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noLeave, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No Notice", bundle: ..., traitCollection: ...)`
    static func noNotice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noNotice, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No Report Card", bundle: ..., traitCollection: ...)`
    static func noReportCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noReportCard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No Syllabus", bundle: ..., traitCollection: ...)`
    static func noSyllabus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noSyllabus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No Teachers", bundle: ..., traitCollection: ...)`
    static func noTeachers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noTeachers, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No Time table", bundle: ..., traitCollection: ...)`
    static func noTimeTable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noTimeTable, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No activity", bundle: ..., traitCollection: ...)`
    static func noActivity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noActivity, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No attendance", bundle: ..., traitCollection: ...)`
    static func noAttendance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noAttendance, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No photos", bundle: ..., traitCollection: ...)`
    static func noPhotos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noPhotos, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "No thoughts", bundle: ..., traitCollection: ...)`
    static func noThoughts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noThoughts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Notice1", bundle: ..., traitCollection: ...)`
    static func notice1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notice1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Notice_new", bundle: ..., traitCollection: ...)`
    static func notice_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notice_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Open Activity", bundle: ..., traitCollection: ...)`
    static func openActivity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.openActivity, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PDF", bundle: ..., traitCollection: ...)`
    static func pdF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pdF, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Path 2644", bundle: ..., traitCollection: ...)`
    static func path2644(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path2644, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Photogallery Thumb", bundle: ..., traitCollection: ...)`
    static func photogalleryThumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photogalleryThumb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Photos1", bundle: ..., traitCollection: ...)`
    static func photos1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photos1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Photos_new", bundle: ..., traitCollection: ...)`
    static func photos_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photos_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Post Answers", bundle: ..., traitCollection: ...)`
    static func postAnswers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.postAnswers, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Profession", bundle: ..., traitCollection: ...)`
    static func profession(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profession, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Re edit username _ St. No.", bundle: ..., traitCollection: ...)`
    static func reEditUsername_StNo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reEditUsername_StNo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Re edit", bundle: ..., traitCollection: ...)`
    static func reEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reEdit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Report Card Menu", bundle: ..., traitCollection: ...)`
    static func reportCardMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reportCardMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Report Card_new", bundle: ..., traitCollection: ...)`
    static func reportCard_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reportCard_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Report card1", bundle: ..., traitCollection: ...)`
    static func reportCard1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reportCard1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Reportcard_report", bundle: ..., traitCollection: ...)`
    static func reportcard_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reportcard_report, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Reports", bundle: ..., traitCollection: ...)`
    static func reports(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reports, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Residential adress", bundle: ..., traitCollection: ...)`
    static func residentialAdress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.residentialAdress, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SMS Smalll Black", bundle: ..., traitCollection: ...)`
    static func smsSmalllBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smsSmalllBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SMS", bundle: ..., traitCollection: ...)`
    static func smS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smS, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SMS1", bundle: ..., traitCollection: ...)`
    static func sms1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sms1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SMS_report", bundle: ..., traitCollection: ...)`
    static func sms_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sms_report, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "School bus _ Stastistica report", bundle: ..., traitCollection: ...)`
    static func schoolBus_StastisticaReport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.schoolBus_StastisticaReport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Screen Shot 2018-05-17 at 12.12.47 PM", bundle: ..., traitCollection: ...)`
    static func screenShot20180517At121247PM(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.screenShot20180517At121247PM, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Self_Stastistica report", bundle: ..., traitCollection: ...)`
    static func self_StastisticaReport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.self_StastisticaReport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Send Dark", bundle: ..., traitCollection: ...)`
    static func sendDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendDark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Send Light", bundle: ..., traitCollection: ...)`
    static func sendLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendLight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Statistical reports", bundle: ..., traitCollection: ...)`
    static func statisticalReports(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statisticalReports, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Statistical_report", bundle: ..., traitCollection: ...)`
    static func statistical_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statistical_report, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Students_reports", bundle: ..., traitCollection: ...)`
    static func students_reports(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.students_reports, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Syllabus1", bundle: ..., traitCollection: ...)`
    static func syllabus1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.syllabus1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Syllabus_new", bundle: ..., traitCollection: ...)`
    static func syllabus_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.syllabus_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TXT", bundle: ..., traitCollection: ...)`
    static func txT(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.txT, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Teacherlist_report", bundle: ..., traitCollection: ...)`
    static func teacherlist_report(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.teacherlist_report, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Teachers1", bundle: ..., traitCollection: ...)`
    static func teachers1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.teachers1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Teachers_new", bundle: ..., traitCollection: ...)`
    static func teachers_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.teachers_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Time table1", bundle: ..., traitCollection: ...)`
    static func timeTable1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeTable1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Time table_new", bundle: ..., traitCollection: ...)`
    static func timeTable_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeTable_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Today_s Birthday", bundle: ..., traitCollection: ...)`
    static func today_sBirthday(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.today_sBirthday, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Toppers1", bundle: ..., traitCollection: ...)`
    static func toppers1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toppers1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Transport", bundle: ..., traitCollection: ...)`
    static func transport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unfilled radio", bundle: ..., traitCollection: ...)`
    static func unfilledRadio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unfilledRadio, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Upload", bundle: ..., traitCollection: ...)`
    static func upload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upload, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Video Play", bundle: ..., traitCollection: ...)`
    static func videoPlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoPlay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "What_s new fill", bundle: ..., traitCollection: ...)`
    static func what_sNewFill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.what_sNewFill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "activity calendar", bundle: ..., traitCollection: ...)`
    static func activityCalendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activityCalendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "activity calendar_new", bundle: ..., traitCollection: ...)`
    static func activityCalendar_new(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activityCalendar_new, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add image(1)", bundle: ..., traitCollection: ...)`
    static func addImage1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addImage1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "add to favorite", bundle: ..., traitCollection: ...)`
    static func addToFavorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addToFavorite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "attachment", bundle: ..., traitCollection: ...)`
    static func attachment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "calss and section", bundle: ..., traitCollection: ...)`
    static func calssAndSection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calssAndSection, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkbox-unfill", bundle: ..., traitCollection: ...)`
    static func checkboxUnfill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkboxUnfill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "classmates_discuss", bundle: ..., traitCollection: ...)`
    static func classmates_discuss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.classmates_discuss, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cross of upload image", bundle: ..., traitCollection: ...)`
    static func crossOfUploadImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crossOfUploadImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cross(1)", bundle: ..., traitCollection: ...)`
    static func cross1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cross1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "date of annivesery", bundle: ..., traitCollection: ...)`
    static func dateOfAnnivesery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dateOfAnnivesery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "e-mega library1", bundle: ..., traitCollection: ...)`
    static func eMegaLibrary1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eMegaLibrary1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "edit cover", bundle: ..., traitCollection: ...)`
    static func editCover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editCover, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emagazine 1", bundle: ..., traitCollection: ...)`
    static func emagazine1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emagazine1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "email id", bundle: ..., traitCollection: ...)`
    static func emailId(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emailId, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gender", bundle: ..., traitCollection: ...)`
    static func gender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gender, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "green triangle", bundle: ..., traitCollection: ...)`
    static func greenTriangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenTriangle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_answered", bundle: ..., traitCollection: ...)`
    static func ic_answered(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_answered, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_assignments", bundle: ..., traitCollection: ...)`
    static func ic_assignments(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_assignments, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_audio", bundle: ..., traitCollection: ...)`
    static func ic_audio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_audio, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_brain", bundle: ..., traitCollection: ...)`
    static func ic_brain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_brain, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_circular", bundle: ..., traitCollection: ...)`
    static func ic_circular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_circular, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_clock", bundle: ..., traitCollection: ...)`
    static func ic_clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_clock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_contact", bundle: ..., traitCollection: ...)`
    static func ic_contact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_contact, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_download", bundle: ..., traitCollection: ...)`
    static func ic_download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_email", bundle: ..., traitCollection: ...)`
    static func ic_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_email_unfill", bundle: ..., traitCollection: ...)`
    static func ic_email_unfill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email_unfill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_eyeshow", bundle: ..., traitCollection: ...)`
    static func ic_eyeshow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_eyeshow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_fee", bundle: ..., traitCollection: ...)`
    static func ic_fee(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fee, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_like_filled", bundle: ..., traitCollection: ...)`
    static func ic_like_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_like_filled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_mail_fill", bundle: ..., traitCollection: ...)`
    static func ic_mail_fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mail_fill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_message", bundle: ..., traitCollection: ...)`
    static func ic_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_mobile_fill", bundle: ..., traitCollection: ...)`
    static func ic_mobile_fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mobile_fill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_mobile_unfill", bundle: ..., traitCollection: ...)`
    static func ic_mobile_unfill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mobile_unfill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_notice", bundle: ..., traitCollection: ...)`
    static func ic_notice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notice, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_parentlogin_fill", bundle: ..., traitCollection: ...)`
    static func ic_parentlogin_fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_parentlogin_fill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_parentlogin_unfill", bundle: ..., traitCollection: ...)`
    static func ic_parentlogin_unfill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_parentlogin_unfill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pdf", bundle: ..., traitCollection: ...)`
    static func ic_pdf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pdf, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_photo", bundle: ..., traitCollection: ...)`
    static func ic_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_reports", bundle: ..., traitCollection: ...)`
    static func ic_reports(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_reports, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_send", bundle: ..., traitCollection: ...)`
    static func ic_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_sms", bundle: ..., traitCollection: ...)`
    static func ic_sms(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sms, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_stafflogin_unfill", bundle: ..., traitCollection: ...)`
    static func ic_stafflogin_unfill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_stafflogin_unfill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_studentlogin_fill", bundle: ..., traitCollection: ...)`
    static func ic_studentlogin_fill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_studentlogin_fill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_studentlogin_unfill", bundle: ..., traitCollection: ...)`
    static func ic_studentlogin_unfill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_studentlogin_unfill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_text", bundle: ..., traitCollection: ...)`
    static func ic_text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_text, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_thought", bundle: ..., traitCollection: ...)`
    static func ic_thought(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_thought, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_unlike", bundle: ..., traitCollection: ...)`
    static func ic_unlike(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unlike, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_view", bundle: ..., traitCollection: ...)`
    static func ic_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_view, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nationality", bundle: ..., traitCollection: ...)`
    static func nationality(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nationality, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "office bearers1", bundle: ..., traitCollection: ...)`
    static func officeBearers1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.officeBearers1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pauseBtn", bundle: ..., traitCollection: ...)`
    static func pauseBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pauseBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "photo album thumb", bundle: ..., traitCollection: ...)`
    static func photoAlbumThumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoAlbumThumb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "playBtn", bundle: ..., traitCollection: ...)`
    static func playBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.playBtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "red triangle", bundle: ..., traitCollection: ...)`
    static func redTriangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redTriangle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "religion", bundle: ..., traitCollection: ...)`
    static func religion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.religion, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "report card", bundle: ..., traitCollection: ...)`
    static func reportCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reportCard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "what_s new unfill", bundle: ..., traitCollection: ...)`
    static func what_sNewUnfill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.what_sNewUnfill, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 19 localization keys.
    struct localizable {
      /// Value: Alert
      static let alert = Rswift.StringResource(key: "Alert", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Approved
      static let approved = Rswift.StringResource(key: "Approved", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Camera
      static let camera = Rswift.StringResource(key: "Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Camera permissions need to be allowed to capture an image using camera . Please allow Camera Permissions from settings.
      static let settingsCameraApp = Rswift.StringResource(key: "SettingsCameraApp", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Clear
      static let clear = Rswift.StringResource(key: "Clear", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Gallery
      static let gallery = Rswift.StringResource(key: "Gallery", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Gallery permissions need to be allowed to pick an image from gallery . Please allow Photo Permissions from settings.
      static let settingsGalleryApp = Rswift.StringResource(key: "SettingsGalleryApp", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NEXT
      static let next = Rswift.StringResource(key: "Next", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let ok = Rswift.StringResource(key: "Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pending
      static let pending = Rswift.StringResource(key: "Pending", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Proceed
      static let proceed = Rswift.StringResource(key: "Proceed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: REAPPLY
      static let reapply = Rswift.StringResource(key: "Reapply", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Rejected
      static let rejected = Rswift.StringResource(key: "Rejected", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Skip
      static let skip = Rswift.StringResource(key: "Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Status
      static let status = Rswift.StringResource(key: "Status", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Update
      static let update = Rswift.StringResource(key: "Update", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Alert
      static func alert(_: Void = ()) -> String {
        return NSLocalizedString("Alert", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Approved
      static func approved(_: Void = ()) -> String {
        return NSLocalizedString("Approved", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Camera
      static func camera(_: Void = ()) -> String {
        return NSLocalizedString("Camera", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Camera permissions need to be allowed to capture an image using camera . Please allow Camera Permissions from settings.
      static func settingsCameraApp(_: Void = ()) -> String {
        return NSLocalizedString("SettingsCameraApp", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Clear
      static func clear(_: Void = ()) -> String {
        return NSLocalizedString("Clear", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Done
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("Done", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Gallery
      static func gallery(_: Void = ()) -> String {
        return NSLocalizedString("Gallery", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Gallery permissions need to be allowed to pick an image from gallery . Please allow Photo Permissions from settings.
      static func settingsGalleryApp(_: Void = ()) -> String {
        return NSLocalizedString("SettingsGalleryApp", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: NEXT
      static func next(_: Void = ()) -> String {
        return NSLocalizedString("Next", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("Ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Pending
      static func pending(_: Void = ()) -> String {
        return NSLocalizedString("Pending", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Proceed
      static func proceed(_: Void = ()) -> String {
        return NSLocalizedString("Proceed", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: REAPPLY
      static func reapply(_: Void = ()) -> String {
        return NSLocalizedString("Reapply", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Rejected
      static func rejected(_: Void = ()) -> String {
        return NSLocalizedString("Rejected", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Settings
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Skip
      static func skip(_: Void = ()) -> String {
        return NSLocalizedString("Skip", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Status
      static func status(_: Void = ()) -> String {
        return NSLocalizedString("Status", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Update
      static func update(_: Void = ()) -> String {
        return NSLocalizedString("Update", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ComposeMsgViewController
      
      let audioPlayerViewController = StoryboardViewControllerResource<AudioPlayerViewController>(identifier: "AudioPlayerViewController")
      let audioViewController = StoryboardViewControllerResource<AudioViewController>(identifier: "AudioViewController")
      let bundle = R.hostingBundle
      let composeMsgViewController = StoryboardViewControllerResource<ComposeMsgViewController>(identifier: "ComposeMsgViewController")
      let headerViewController = StoryboardViewControllerResource<HeaderViewController>(identifier: "HeaderViewController")
      let imageViewController = StoryboardViewControllerResource<ImageViewController>(identifier: "ImageViewController")
      let name = "Main"
      let textViewController = StoryboardViewControllerResource<TextViewController>(identifier: "TextViewController")
      
      func audioPlayerViewController(_: Void = ()) -> AudioPlayerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: audioPlayerViewController)
      }
      
      func audioViewController(_: Void = ()) -> AudioViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: audioViewController)
      }
      
      func composeMsgViewController(_: Void = ()) -> ComposeMsgViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: composeMsgViewController)
      }
      
      func headerViewController(_: Void = ()) -> HeaderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: headerViewController)
      }
      
      func imageViewController(_: Void = ()) -> ImageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imageViewController)
      }
      
      func textViewController(_: Void = ()) -> TextViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: textViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_contact") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_contact' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "attachment") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'attachment' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "playBtn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'playBtn' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().imageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imageViewController' could not be loaded from storyboard 'Main' as 'ImageViewController'.") }
        if _R.storyboard.main().audioViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'audioViewController' could not be loaded from storyboard 'Main' as 'AudioViewController'.") }
        if _R.storyboard.main().headerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'headerViewController' could not be loaded from storyboard 'Main' as 'HeaderViewController'.") }
        if _R.storyboard.main().audioPlayerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'audioPlayerViewController' could not be loaded from storyboard 'Main' as 'AudioPlayerViewController'.") }
        if _R.storyboard.main().textViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'textViewController' could not be loaded from storyboard 'Main' as 'TextViewController'.") }
        if _R.storyboard.main().composeMsgViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'composeMsgViewController' could not be loaded from storyboard 'Main' as 'ComposeMsgViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
